version: '3.8'

# Hybrid deployment: CPU + GPU instances running simultaneously
# Usage: docker-compose -f docker-compose.hybrid.yml up
# This configuration runs both CPU and GPU services in parallel

services:
  # ============================================================================
  # CPU Instance - Port 8000
  # ============================================================================
  kronos-api-cpu:
    build:
      context: ../..
      dockerfile: services/kronos_fastapi/Dockerfile
    image: kronos-fastapi:latest
    container_name: kronos-api-cpu
    hostname: kronos-api-cpu

    # Environment variables - CPU optimized
    environment:
      - KRONOS_APP_NAME=Kronos FastAPI Service (CPU)
      - KRONOS_LOG_LEVEL=${KRONOS_LOG_LEVEL:-INFO}
      - KRONOS_MODEL_PATH=/models
      - KRONOS_DEVICE=cpu
      - KRONOS_MAX_CONTEXT=512
      - KRONOS_DEFAULT_PRED_LEN=120
      - KRONOS_DEFAULT_TEMPERATURE=1.0
      - KRONOS_DEFAULT_TOP_P=0.9
      - KRONOS_ENABLE_METRICS=true
      # Security settings
      - KRONOS_SECURITY_ENABLED=${KRONOS_SECURITY_ENABLED:-true}
      - KRONOS_CONTAINER_WHITELIST=${KRONOS_CONTAINER_WHITELIST:-localhost,frontend-app,worker-service,scheduler,nginx-lb}
      - KRONOS_RATE_LIMIT_ENABLED=${KRONOS_RATE_LIMIT_ENABLED:-true}
      - KRONOS_RATE_LIMIT_PER_MINUTE=100
      - KRONOS_MAX_REQUEST_SIZE_MB=10

    # Volumes
    volumes:
      - ${KRONOS_MODEL_HOST_PATH:-../../../models}:/models:ro
      - logs-cpu:/logs

    # Networks
    networks:
      - kronos-internal

    # Internal port only (access via load balancer)
    expose:
      - "8000"

    # CPU resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

    # Restart policy
    restart: unless-stopped

    # Graceful shutdown
    stop_grace_period: 30s
    stop_signal: SIGTERM

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # GPU Instance - Port 8000 (internal)
  # ============================================================================
  kronos-api-gpu:
    build:
      context: ../..
      dockerfile: services/kronos_fastapi/Dockerfile
    image: kronos-fastapi:latest
    container_name: kronos-api-gpu
    hostname: kronos-api-gpu

    # GPU runtime configuration
    runtime: nvidia

    # Environment variables - GPU optimized
    environment:
      - KRONOS_APP_NAME=Kronos FastAPI Service (GPU)
      - KRONOS_LOG_LEVEL=${KRONOS_LOG_LEVEL:-INFO}
      - KRONOS_MODEL_PATH=/models
      - KRONOS_DEVICE=cuda:0
      - KRONOS_MAX_CONTEXT=512
      - KRONOS_DEFAULT_PRED_LEN=120
      - KRONOS_DEFAULT_TEMPERATURE=1.0
      - KRONOS_DEFAULT_TOP_P=0.9
      - KRONOS_ENABLE_METRICS=true
      # Security settings
      - KRONOS_SECURITY_ENABLED=${KRONOS_SECURITY_ENABLED:-true}
      - KRONOS_CONTAINER_WHITELIST=${KRONOS_CONTAINER_WHITELIST:-localhost,frontend-app,worker-service,scheduler,nginx-lb}
      - KRONOS_RATE_LIMIT_ENABLED=${KRONOS_RATE_LIMIT_ENABLED:-true}
      - KRONOS_RATE_LIMIT_PER_MINUTE=200  # Higher for GPU
      - KRONOS_MAX_REQUEST_SIZE_MB=20  # Larger for GPU
      # NVIDIA environment variables
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-0}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility

    # Volumes
    volumes:
      - ${KRONOS_MODEL_HOST_PATH:-../../../models}:/models:ro
      - logs-gpu:/logs

    # Networks
    networks:
      - kronos-internal

    # Internal port only (access via load balancer)
    expose:
      - "8000"

    # GPU resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]

    # Restart policy
    restart: unless-stopped

    # Graceful shutdown
    stop_grace_period: 30s
    stop_signal: SIGTERM

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Longer for GPU

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # NGINX Load Balancer (Optional)
  # ============================================================================
  nginx-lb:
    image: nginx:alpine
    container_name: kronos-nginx-lb
    hostname: kronos-nginx-lb

    # Port mapping - external access point
    ports:
      - "${KRONOS_LB_PORT:-8080}:80"

    # Networks
    networks:
      - kronos-internal

    # NGINX configuration
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - logs-nginx:/var/log/nginx

    # Depends on both backends
    depends_on:
      kronos-api-cpu:
        condition: service_healthy
      kronos-api-gpu:
        condition: service_healthy

    # Restart policy
    restart: unless-stopped

    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/v1/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

    # Only start with --profile loadbalancer
    profiles:
      - loadbalancer

networks:
  kronos-internal:
    driver: bridge
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  logs-cpu:
    driver: local
  logs-gpu:
    driver: local
  logs-nginx:
    driver: local
